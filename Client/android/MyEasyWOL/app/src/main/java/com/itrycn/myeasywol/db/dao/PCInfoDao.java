package com.itrycn.myeasywol.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.itrycn.myeasywol.db.entity.PCInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PCINFO".
*/
public class PCInfoDao extends AbstractDao<PCInfo, Long> {

    public static final String TABLENAME = "PCINFO";

    /**
     * Properties of entity PCInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Ip = new Property(2, String.class, "ip", false, "IP");
        public final static Property Port = new Property(3, int.class, "port", false, "PORT");
        public final static Property Mac = new Property(4, String.class, "mac", false, "MAC");
        public final static Property ServerID = new Property(5, Long.class, "serverID", false, "SERVER_ID");
    }


    public PCInfoDao(DaoConfig config) {
        super(config);
    }
    
    public PCInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PCINFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"IP\" TEXT," + // 2: ip
                "\"PORT\" INTEGER NOT NULL ," + // 3: port
                "\"MAC\" TEXT," + // 4: mac
                "\"SERVER_ID\" INTEGER);"); // 5: serverID
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PCINFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PCInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String ip = entity.getIp();
        if (ip != null) {
            stmt.bindString(3, ip);
        }
        stmt.bindLong(4, entity.getPort());
 
        String mac = entity.getMac();
        if (mac != null) {
            stmt.bindString(5, mac);
        }
 
        Long serverID = entity.getServerID();
        if (serverID != null) {
            stmt.bindLong(6, serverID);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PCInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String ip = entity.getIp();
        if (ip != null) {
            stmt.bindString(3, ip);
        }
        stmt.bindLong(4, entity.getPort());
 
        String mac = entity.getMac();
        if (mac != null) {
            stmt.bindString(5, mac);
        }
 
        Long serverID = entity.getServerID();
        if (serverID != null) {
            stmt.bindLong(6, serverID);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PCInfo readEntity(Cursor cursor, int offset) {
        PCInfo entity = new PCInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // ip
            cursor.getInt(offset + 3), // port
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // mac
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5) // serverID
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PCInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIp(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPort(cursor.getInt(offset + 3));
        entity.setMac(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setServerID(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PCInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PCInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PCInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
